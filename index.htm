<html>
<head>
<title>A simple Three.js prototype of a bouncing ball</title>
<style>canvas { width: 100%; height: 100%}</style>
</head>
<body>
<script src="https://rawgithub.com/mrdoob/three.js/master/build/three.js"></script>
<script>
gKeyState = Array();
function onKeyDown(event) {
    //console.log(event.keyCode);
    gKeyState[event.keyCode] = true;
    //if (event.keyCode == 87 ) {
        //changeColor();
    //}
}
function onKeyUp(event) {
    gKeyState[event.keyCode] = false;
}
window.addEventListener('keydown', onKeyDown, false);
window.addEventListener('keyup', onKeyUp, false);

var leftWall, rightWall;
var obstacles = Array();

var scene = new THREE.Scene();
scene.fog = new THREE.FogExp2( 0x000000, 0.015);

var width = window.innerWidth;
var height = window.innerHeight;
var camera = new THREE.PerspectiveCamera(25, width / height, 0.1, 1000);
camera.position.y = 5;
camera.position.z = 20;

var renderer = new THREE.WebGLRenderer();
renderer.setSize(width, height);

renderer.shadowMapEnabled = true;
renderer.shadowMapSoft = true;

document.body.appendChild( renderer.domElement );

/*var geometry = new THREE.SphereGeometry(1);
var material = new THREE.MeshLambertMaterial({color: 0x00ff00, ambient: 0xff0000});
var ball = new THREE.Mesh(geometry, material);
ball.position.set(0, 0, -10);
scene.add(ball);*/

var geometry = new THREE.PlaneGeometry(1000, 1000);
var material = new THREE.MeshLambertMaterial({color: 0x00ff00, ambient: 0x00ff00});
var plane = new THREE.Mesh(geometry, material);
plane.rotation.x = -Math.PI/2;
scene.add(plane);

var wallLength = 200;
geometry = new THREE.PlaneGeometry(wallLength, 10);
var material = new THREE.MeshLambertMaterial({color: 0x0000ff, ambient: 0x0000ff});
var plane = new THREE.Mesh(geometry, material);
plane.rotation.y = -Math.PI/2;
plane.position.x = 5;
plane.position.z = -wallLength/2;
scene.add(plane);
rightWall = plane;

//geometry = new THREE.PlaneGeometry(20, 10);
//var material = new THREE.MeshLambertMaterial({color: 0x0000ff, ambient: 0x0000ff});
var plane = new THREE.Mesh(geometry, material);
plane.rotation.y = Math.PI/2;
plane.position.x = -5;
plane.position.z = -wallLength/2;
scene.add(plane);
leftWall = plane;

var obstacleWidth = 5;
geometry = new THREE.CubeGeometry(obstacleWidth, 2, 2);
material = new THREE.MeshLambertMaterial({color: 0xff0000, ambient: 0xff0000});
var obstacle = null;
var x = null;
for (var i = 0; i<10; i++) {    
    obstacle = new THREE.Mesh(geometry, material);
    if (i %2 == 0) {
        x = -5 + obstacleWidth/2;
    } else {
        x = 5 - obstacleWidth/2;
    }
    obstacle.position.set(x, 1, -20*i-20);
    scene.add(obstacle);
    obstacles.push(obstacle);
}

var ambientLight = new THREE.AmbientLight(0xA0A0A0);
scene.add(ambientLight);
//lights.push(ambientLight);

function calcVector(p1, p2) {
    return [p1[0] - p2[0], p1[1] - p2[1]];
}
function calcDistance(vect) {
    return Math.sqrt(Math.pow(vect[0], 2) + Math.pow(vect[1], 2));
}
      
function render() {
    requestAnimationFrame(render);
    
    var oldposition = camera.position.clone();
    var bad = false;
    var movement = 0.1
    var buffer = 2.0;
    
    if (gKeyState[87] == true) {
        camera.position.z -= movement;
    } else if (gKeyState[83] == true) {
        camera.position.z += movement;
    }
    if (gKeyState[65] == true) {
        camera.position.x -= movement;
    } else if (gKeyState[68] == true) {
        camera.position.x += movement;
    }
    
    if (camera.position.x > rightWall.position.x - buffer || camera.position.x < leftWall.position.x + buffer ) {
        bad = true;
    }
    
    if (bad == true) {
        camera.position = oldposition;
    }
    
    renderer.render(scene, camera);
}
render();
</script>
</body>
</html>
